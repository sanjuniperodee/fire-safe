from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from auths.models import CustomUserRole, UserRole, Category
from objects.models import Document, DocumentKey
from objects.management.commands.create_documents import Command as CreateDocumentsCommand
from objects.management.commands.create_document_keys import Command as CreateDocumentKeysCommand
from auths.management.commands.init_categories import Command as InitCategoriesCommand
import auths

User = get_user_model()

class Command(BaseCommand):
    help = 'Initialize project with all necessary data'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üöÄ Initializing project...'))
        
        # 1. –°–æ–∑–¥–∞–µ–º —Ä–æ–ª–∏
        self.create_roles()
        
        # 2. –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        self.create_admin()
        
        # 3. –°–æ–∑–¥–∞–µ–º –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
        self.create_inspectors()
        
        # 4. –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∫–ª—é—á–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        self.create_documents()
        
        # 5. –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥
        self.create_categories()
        
        self.stdout.write(self.style.SUCCESS('‚úÖ Project initialization completed!'))
        self.print_credentials()

    def create_roles(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        self.stdout.write('üìù Creating user roles...')
        
        # –°–æ–∑–¥–∞–µ–º —Ä–æ–ª–∏ –∏–∑ auths.Role
        for role_choice in auths.Role.choices:
            role_name, display_name = role_choice
            role, created = CustomUserRole.objects.get_or_create(
                role=role_name
            )
            if created:
                self.stdout.write(f'  ‚úì Created role: {display_name}')
            else:
                self.stdout.write(f'  - Role exists: {display_name}')



    def create_admin(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        self.stdout.write('üë§ Creating admin user...')
        
        admin_phone = '+77758489538'
        admin_password = 'u4DwQw04'
        
        admin_user, created = User.objects.get_or_create(
            phone=admin_phone,
            defaults={
                'email': 'admin@qorgau.kz',
                'first_name': '–ê–¥–º–∏–Ω',
                'last_name': '–°–∏—Å—Ç–µ–º—ã',
                'is_staff': True,
                'is_superuser': True,
                'is_active': True,
            }
        )
        
        if created:
            admin_user.set_password(admin_password)
            admin_user.save()
            self.stdout.write(f'  ‚úì Created admin: {admin_phone}')
        else:
            self.stdout.write(f'  - Admin exists: {admin_phone}')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_role = CustomUserRole.objects.get(role=auths.Role.ADMIN)
        user_role, created = UserRole.objects.get_or_create(
            user=admin_user,
            role=admin_role,
            defaults={'status': auths.Status.ACCEPTED}
        )
        if created:
            self.stdout.write('  ‚úì Added ADMIN role')
        else:
            self.stdout.write('  - ADMIN role already exists')

    def create_inspectors(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
        self.stdout.write('üë®‚Äçüíº Creating inspectors for each city...')
        
        inspector_role = CustomUserRole.objects.get(role=auths.Role.INSPECTOR)
        cities = [
            '–ê–ª–º–∞—Ç—ã',
            '–ù—É—Ä-–°—É–ª—Ç–∞–Ω',
            '–®—ã–º–∫–µ–Ω—Ç',
            '–ê–∫—Ç–æ–±–µ',
            '–¢–∞—Ä–∞–∑',
            '–ü–∞–≤–ª–æ–¥–∞—Ä',
            '–£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫',
            '–°–µ–º–µ–π',
            '–ê—Ç—ã—Ä–∞—É',
            '–ö–æ—Å—Ç–∞–Ω–∞–π',
            '–ö—ã–∑—ã–ª–æ—Ä–¥–∞',
            '–£—Ä–∞–ª—å—Å–∫',
            '–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫',
            '–ê–∫—Ç–∞—É',
            '–¢–µ–º–∏—Ä—Ç–∞—É',
        ]
        
        inspector_data = []
        
        for i, city_name in enumerate(cities, 1):
            phone = f'+7775848{i:04d}'  # +77758481001, +77758481002, etc.
            password = f'inspector{i:02d}'  # inspector01, inspector02, etc.
            
            inspector, created = User.objects.get_or_create(
                phone=phone,
                defaults={
                    'email': f'inspector.{city_name.lower()}@qorgau.kz',
                    'first_name': f'–ò–Ω—Å–ø–µ–∫—Ç–æ—Ä',
                    'last_name': city_name,
                    'is_active': True,
                    'inspector_jurisdiction_city': city_name,
                    'iin': f'{i:012d}',  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π 12-–∑–Ω–∞—á–Ω—ã–π IIN
                }
            )
            
            if created:
                inspector.set_password(password)
                inspector.save()
                self.stdout.write(f'  ‚úì Created inspector for {city_name}: {phone}')
            else:
                self.stdout.write(f'  - Inspector exists for {city_name}: {phone}')
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞
            user_role, role_created = UserRole.objects.get_or_create(
                user=inspector,
                role=inspector_role,
                defaults={'status': auths.Status.ACCEPTED}
            )
            if role_created:
                self.stdout.write(f'    ‚úì Added INSPECTOR role')
            else:
                self.stdout.write(f'    - INSPECTOR role already exists')
            
            inspector_data.append({
                'city': city_name,
                'phone': phone,
                'password': password,
                'email': inspector.email
            })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è README
        self.inspector_credentials = inspector_data

    def create_documents(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –∫–ª—é—á–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        self.stdout.write('üìã Creating documents and document keys...')
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        if not Document.objects.exists():
            create_docs_command = CreateDocumentsCommand()
            create_docs_command.handle()
            self.stdout.write('  ‚úì Created documents')
        else:
            self.stdout.write('  - Documents already exist')
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if not DocumentKey.objects.exists():
            create_keys_command = CreateDocumentKeysCommand()
            create_keys_command.handle()
            self.stdout.write('  ‚úì Created document keys')
        else:
            self.stdout.write('  - Document keys already exist')

    def create_categories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥"""
        self.stdout.write('üìã Creating service categories...')
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if not Category.objects.exists():
            init_categories_command = InitCategoriesCommand()
            init_categories_command.handle()
            self.stdout.write('  ‚úì Created service categories')
        else:
            self.stdout.write('  - Service categories already exist')

    def print_credentials(self):
        """–í—ã–≤–æ–¥ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.stdout.write('\n' + '='*60)
        self.stdout.write(self.style.SUCCESS('üîë –£–ß–ï–¢–ù–´–ï –î–ê–ù–ù–´–ï –°–ò–°–¢–ï–ú–´'))
        self.stdout.write('='*60)
        
        self.stdout.write('\nüë§ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†:')
        self.stdout.write('  –¢–µ–ª–µ—Ñ–æ–Ω: +77758489538')
        self.stdout.write('  –ü–∞—Ä–æ–ª—å: u4DwQw04')
        self.stdout.write('  Email: admin@qorgau.kz')
        
        self.stdout.write('\nüë®‚Äçüíº –ò–ù–°–ü–ï–ö–¢–û–†–´ –ü–û –ì–û–†–û–î–ê–ú:')
        for inspector in self.inspector_credentials:
            self.stdout.write(f"  {inspector['city']}:")
            self.stdout.write(f"    –¢–µ–ª–µ—Ñ–æ–Ω: {inspector['phone']}")
            self.stdout.write(f"    –ü–∞—Ä–æ–ª—å: {inspector['password']}")
            self.stdout.write(f"    Email: {inspector['email']}")
        
        self.stdout.write('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:')
        self.stdout.write(f"  –†–æ–ª–µ–π: {CustomUserRole.objects.count()}")
        self.stdout.write(f"  –ù–∞–∑–Ω–∞—á–µ–Ω–∏–π —Ä–æ–ª–µ–π: {UserRole.objects.count()}")
        self.stdout.write(f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {User.objects.count()}")
        self.stdout.write(f"  –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {Document.objects.count()}")
        self.stdout.write(f"  –ö–ª—é—á–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {DocumentKey.objects.count()}")
        self.stdout.write(f"  –ö–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥: {Category.objects.count()}")
        
        self.stdout.write('\n' + '='*60) 